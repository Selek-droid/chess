			//offsets[7] = [1, -1];
			//offsets[6] = [1, 0];
			//offsets[5] = [1, 1];
			//offsets[4] = [0, 1];
			//offsets[3] = [-1, 1];
			//offsets[2] = [-1, 0];
			//offsets[1] = [-1, -1];
			//offsets[0] = [0, -1];		

Hi mom,

The notaire has sent to your email a document for you.  You shouldn't try to print it or sign it; I just want to make sure you received it.  Can you check your inbox and spam folder for it?  It would be from office.frappatetassocies-loches, or the assistant to the notaire, Anne-sylvaine Boyault, or the notaire herself, Maud Frappat.

Also, for our videoconference (this coming Tuesday at noon), you need to install the app "LifeSize".  If you laptop has a webcam, then I'd install it on the laptop.  Wherever you install it, you'll need that device to have a webcam. 

Love,

Geoff	



// -----------=============================

//if (xx == 0) && (yy == 0)   // TOP LEFT CORNER
//{
//	var targetID = boardState[xx + 1, yy];  // King, Q, R directly E
//	if (targetID[1] == enemy)
//	{
//		if (targetID[0] == KING) || (targetID[0] == ROOK) || (targetID[0] == QUEEN) return true;
//	}
	
//	var targetID = boardState[xx + 1, yy + 1];  // King, Q, R directly SE
//	if (targetID[1] == enemy)
//	{
//		if (targetID[0] == KING) || (targetID[0] == ROOK) || (targetID[0] == QUEEN) return true;
//	}
	
//	var targetID = boardState[xx, yy + 1];  // King, Q, R directly S
//	if (targetID[1] == enemy)
//	{
//		if (targetID[0] == KING) || (targetID[0] == ROOK) || (targetID[0] == QUEEN) return true;
//	}
//}

//if (xx == 7 ) && ( yy == 0 )  // TOP RIGHT CORNER
//{
//	var targetID = boardState[xx = 1, yy];  // King, Q, R directly W -- only Rook really possible
//	if (targetID[1] == enemy)
//	{
//		if (targetID[0] == KING) || (targetID[0] == ROOK) || (targetID[0] == QUEEN) return true;
//	}
	
//	var targetID = boardState[xx = 1, yy + 1];  // King, Q, R directly SW
//	if (targetID[1] == enemy)
//	{
//		if (targetID[0] == KING) || (targetID[0] == ROOK) || (targetID[0] == QUEEN) return true;
//	}
		
//	var targetID = boardState[xx, yy + 1];  // King, Q, R directly S
//	if (targetID[1] == enemy)
//	{
//		if (targetID[0] == KING) || (targetID[0] == ROOK) || (targetID[0] == QUEEN) return true;
//	}
//}


// SE and SW corners laterr

---- from step event board 0bject:

// Find King position. Before moving any piece, check to see if proposed move leaves King threatened.

//for (var xx = 0; xx < 8; xx += 1;)
//{
//	for (var yy = 0; yy < 8; yy += 1;)
//	{
//		if array_equals(boardState[xx, yy],[KING, WHITE])
//		{
//			var kingPosition = [xx , yy];
//			break;
//		}
//	}
//}

// look for mouse click on a piece. If something there,
// store it, then clear its space, then put it on mouse cursor.
// Then look for second click. If valid, move piece there.
// If not valid, keep piece on cursor.
// If user hits ESC, cancel move, restore saved selection.



		