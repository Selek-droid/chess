			//offsets[7] = [1, -1];
			//offsets[6] = [1, 0];
			//offsets[5] = [1, 1];
			//offsets[4] = [0, 1];
			//offsets[3] = [-1, 1];
			//offsets[2] = [-1, 0];
			//offsets[1] = [-1, -1];
			//offsets[0] = [0, -1];		

Hi mom,

The notaire has sent to your email a document for you.  You shouldn't try to print it or sign it; I just want to make sure you received it.  Can you check your inbox and spam folder for it?  It would be from office.frappatetassocies-loches, or the assistant to the notaire, Anne-sylvaine Boyault, or the notaire herself, Maud Frappat.

Also, for our videoconference (this coming Tuesday at noon), you need to install the app "LifeSize".  If you laptop has a webcam, then I'd install it on the laptop.  Wherever you install it, you'll need that device to have a webcam. 

Love,

Geoff	



// -----------=============================

//if (xx == 0) && (yy == 0)   // TOP LEFT CORNER
//{
//	var targetID = boardState[xx + 1, yy];  // King, Q, R directly E
//	if (targetID[1] == enemy)
//	{
//		if (targetID[0] == KING) || (targetID[0] == ROOK) || (targetID[0] == QUEEN) return true;
//	}
	
//	var targetID = boardState[xx + 1, yy + 1];  // King, Q, R directly SE
//	if (targetID[1] == enemy)
//	{
//		if (targetID[0] == KING) || (targetID[0] == ROOK) || (targetID[0] == QUEEN) return true;
//	}
	
//	var targetID = boardState[xx, yy + 1];  // King, Q, R directly S
//	if (targetID[1] == enemy)
//	{
//		if (targetID[0] == KING) || (targetID[0] == ROOK) || (targetID[0] == QUEEN) return true;
//	}
//}

//if (xx == 7 ) && ( yy == 0 )  // TOP RIGHT CORNER
//{
//	var targetID = boardState[xx = 1, yy];  // King, Q, R directly W -- only Rook really possible
//	if (targetID[1] == enemy)
//	{
//		if (targetID[0] == KING) || (targetID[0] == ROOK) || (targetID[0] == QUEEN) return true;
//	}
	
//	var targetID = boardState[xx = 1, yy + 1];  // King, Q, R directly SW
//	if (targetID[1] == enemy)
//	{
//		if (targetID[0] == KING) || (targetID[0] == ROOK) || (targetID[0] == QUEEN) return true;
//	}
		
//	var targetID = boardState[xx, yy + 1];  // King, Q, R directly S
//	if (targetID[1] == enemy)
//	{
//		if (targetID[0] == KING) || (targetID[0] == ROOK) || (targetID[0] == QUEEN) return true;
//	}
//}


// SE and SW corners laterr

---- from step event board 0bject:

// Find King position. Before moving any piece, check to see if proposed move leaves King threatened.

//for (var xx = 0; xx < 8; xx += 1;)
//{
//	for (var yy = 0; yy < 8; yy += 1;)
//	{
//		if array_equals(boardState[xx, yy],[KING, WHITE])
//		{
//			var kingPosition = [xx , yy];
//			break;
//		}
//	}
//}

// look for mouse click on a piece. If something there,
// store it, then clear its space, then put it on mouse cursor.
// Then look for second click. If valid, move piece there.
// If not valid, keep piece on cursor.
// If user hits ESC, cancel move, restore saved selection.


---- 
commented king code

				//var targetID = global.grid[xx - 1, yy];  // offset -1, 0
				//if ((targetID[1] == 0) || (targetID[1] == WHITE)) && !((threatenedSquare_scr(xx - 1, yy, boardState)) )
				//	ds_list_add(legalMoves, xx, yy, xx - 1, yy);
								
				//var targetID = global.grid[xx - 1, yy + 1];  // offset -1, 1
				//if ((targetID[1] == 0) || (targetID[1] == WHITE)) && !((threatenedSquare_scr(xx - 1, yy + 1, boardState)) )
				//	ds_list_add(legalMoves, xx, yy, xx - 1, yy + 1);
								
				//var targetID = global.grid[xx, yy + 1];  // offset 0, 1
				//if ((targetID[1] == 0) || (targetID[1] == WHITE)) && !((threatenedSquare_scr(xx, yy + 1, boardState)) )
				//	ds_list_add(legalMoves, xx, yy, xx, yy + 1);
				
				//var targetID = global.grid[xx + 1, yy + 1];  // offset 1, 1
				//if ((targetID[1] == 0) || (targetID[1] == WHITE)) && !((threatenedSquare_scr(xx + 1, yy + 1, boardState) ))
				//	ds_list_add(legalMoves, xx, yy, xx + 1, yy + 1);
						
				//var targetID = global.grid[xx + 1, yy];  // offset 1, 0
				//if ((targetID[1] == 0) || (targetID[1] == WHITE)) && !((threatenedSquare_scr(xx + 1, yy, boardState)) )
				//	ds_list_add(legalMoves, xx, yy, xx + 1, yy);	

-----------------

Superflulous Silician D:


//if (oGame.turn == 1) && (ds_list_find_value(oGame.formattedHistory,0) == "e4") 
//	{
//		animate([PAWN, BLACK],2,1,2,3);
//		updateHistory_scr([PAWN, BLACK], 2, 1, 2, 3, false);
//		oGame.turn += 1;
//		oGame.state = "Player Turn";
//		exit;
//	}	

//if (oGame.turn == 2) 
//{
//	if ((ds_list_find_value(oGame.formattedHistory,2) == "Nf3"))
//	{
//		animate([PAWN, BLACK],3,1,3,2);
//		updateHistory_scr([PAWN, BLACK], 3, 1, 3, 2, false);
//		oGame.turn += 1;
//		oGame.state = "Player Turn";
//		exit;
//	}
//	else 
//	{
//		animate([KNIGHT, BLACK],1,0,2,2);
//		updateHistory_scr([KNIGHT, BLACK], 1, 0, 2, 2, false);
//		oGame.turn += 1;
//		oGame.state = "Player Turn";
//		oGame.AIOpening = false;
//		exit;
//	}
//}	
	
//if (oGame.turn == 3) && (ds_list_find_value(oGame.formattedHistory,4) == "d4")
//{
//	animate([PAWN, BLACK],2,3,3,4);  // Pawn x d4
//	updateHistory_scr([PAWN, BLACK], 2, 3, 3, 4, true);
//	oGame.turn += 1;
//	oGame.state = "Player Turn";
//	exit;
//}
	
//if (oGame.turn == 4) && (ds_list_find_value(oGame.formattedHistory,6) == "Nxd4")
//{
//	animate([KNIGHT, BLACK],6,0,5,2);  // Nf6
//	updateHistory_scr([KNIGHT, BLACK], 6, 0, 5, 2, false);
//	oGame.turn += 1;
//	oGame.state = "Player Turn";
//	exit;
//}

//if (oGame.turn == 5) && (ds_list_find_value(oGame.formattedHistory,8) == "Nc3")
//{
//	animate([PAWN, BLACK],0,1,0,2);  // Najdorf variation: 5...a6
//	updateHistory_scr([PAWN, BLACK],  0, 1, 0, 2, false);
//	oGame.turn += 1;
//	oGame.state = "Player Turn";
//	exit;
//}

//if (oGame.turn == 6) 
//{
//	if (ds_list_find_value(oGame.formattedHistory,10) == "Be3")
//	{
//		animate([PAWN, BLACK],4,1,4,3);  // Najdorf variation, English attack. Response: 6...e5
//		updateHistory_scr([PAWN, BLACK], 4, 1, 4, 3, false);
//		oGame.turn += 1;
//		oGame.state = "Player Turn";
//		exit;
//	}
	
//	if (ds_list_find_value(oGame.formattedHistory,10) == "Bg5")
//	{
//		animate([PAWN, BLACK],4,1,4,2);  // Najdorf variation, classical attack. Response: 6...e6
//		updateHistory_scr([PAWN, BLACK], 4, 1, 4, 2, false);
//		oGame.turn += 1;
//		oGame.state = "Player Turn";
//		exit;
//	}
//}

//if (oGame.turn == 7) 
//{
//	if (ds_list_find_value(oGame.formattedHistory,10) == "Be3") &&
//	(ds_list_find_value(oGame.formattedHistory,12) == "Nb3")
//	{
//		animate([BISHOP, BLACK],2,0,4,2);  // Najdorf variation, classical attack. Response: 7...Be6
//		updateHistory_scr([BISHOP, BLACK], 2, 0, 4, 2, false);
//		oGame.turn += 1;
//		oGame.state = "Player Turn";
//		oGame.AIOpening = false;
//		exit;
//	}
	
//	if (ds_list_find_value(oGame.formattedHistory,10) == "Bg5") &&
//	(ds_list_find_value(oGame.formattedHistory,12) == "f4")
//	{
//		animate([BISHOP, BLACK],5,0,4,1);  // Najdorf variation, classical attack. Response: 7...Be6
//		updateHistory_scr([BISHOP, BLACK], 5, 0, 4, 1, false);
//		oGame.turn += 1;
//		oGame.state = "Player Turn";
//		oGame.AIOpening = false;
//		exit;
//	}
	
//}	


		